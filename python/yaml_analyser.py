#!/usr/bin/python3

import argparse
import os
try:
    import yaml
except Exception:
    print("Please install PyYAML if you want to support yaml configurations!")
    raise

kind = 'kind'
detailed_print = False


def read_config_file(path, func):
    with open(path, 'r') as f:
        metadata = f.read()
        config = func(metadata)
        return config


def parse_arguments():
    parser = argparse.ArgumentParser(
                      description='Compare yaml files and \
                      generates difference to screen.',
                      formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-c', '--current-file', type=str, required=True,
                        help='Current yaml file')

    parser.add_argument('-n', '--new-file', type=str, required=True,
                        help='New yaml file generated by helm')

    parser.add_argument('-d', '--detailed', action='store_true',
                        required=False,
                        help='Print detailed output')

    args = parser.parse_args()
    return args


def initialize(args):
    f_old = os.path.abspath(args.current_file)
    f_new = os.path.abspath(args.new_file)
    config_old = read_config_file(f_old, yaml.load_all)
    config_new = read_config_file(f_new, yaml.load_all)
    return config_old, config_new


def compare_intersected(new_doc, old_doc):
    n_keys = set(new_doc.keys())
    o_keys = set(old_doc.keys())

    intersect_keys = n_keys.intersection(o_keys)
    print('kind::{} '.format(new_doc[kind]))
    print('-'*80)
    for i in intersect_keys:
        if new_doc[i] == old_doc[i]:
            print('Equal values for key:\t\t{}'.format(i))
        else:
            print('Modified values for key:\t{}'.format(i))
            if detailed_print:
                print('NEW_doc: {}'.format(new_doc[i]))
                print('------')
                print('OLD_doc: {}'.format(old_doc[i]))
                print('\n')


def present_in_old(kind_value, old_docs):
    for old_doc in old_docs:
        if kind in old_doc.keys():
            if old_doc[kind] == kind_value:
                return True
    return False


def check_added_docs(new_docs, old_docs):
    for new_doc in new_docs:
        if kind in new_doc.keys():
            exist = present_in_old(new_doc[kind], old_docs)
            if (not exist):
                print('{}::{} DOES NOT exist in old helm file '.format(kind,
                      new_doc[kind]))
                if detailed_print:
                    print('{}'.format(new_doc))


def check_intersection(new_docs, old_docs):
    for new_doc in new_docs:
        # Parse only  kind types in config, generic info helm file
        # can be ignored
        if kind in new_doc.keys():
                for old_doc in old_docs:
                    if kind in old_doc.keys():
                        if old_doc[kind] == new_doc[kind]:
                            compare_intersected(new_doc, old_doc)
                print('\n')


def compare_yaml_files(config_new, config_old):
    new_docs = list(config_new)
    old_docs = list(config_old)

    print('\n')
    print('**** Step 1: Analyse on new docs present in latest helm file****\n')
    check_added_docs(new_docs, old_docs)

    print('\n')
    print('**** Step 2: Analyse on attributes different in helm files ****\n')
    check_intersection(new_docs, old_docs)


def main():
    args = parse_arguments()

    global detailed_print
    detailed_print = args.detailed
    config_old, config_new = initialize(args)

    compare_yaml_files(config_new, config_old)


if __name__ == "__main__":
    main()
