Skillsoft exercises marked as _ss in file name
----------------------------------------------

Python: The Basics                                      Done
Python Fundamentals (optional)                          Done

Python: Classes and Modules                             Done
    - good examples on read, write files, including performance and binary files pack / unpack / parse

Iterables & Generators                                  Opt
    - map/filter functions, rest can be ignored


Conditional Statements & Loops: The Basics of for…      Opt
Conditional Statements & Loops: While Loops in Python   Opt
Conditional Statements & Loops: Advanced Operations     Opt

Python Requests: HTTP Requests with Python              Done

Python Classes & Inheritance: Working with Inheritance  Done

Python Classes & Inheritance: Advanced Functionality    Done
    - overlapped with prev courses, examples:
    - builtin types (properties)
    - custom implementation of properties
    - iterators
    - class properties
    - staticmethod, classmethod,
    - abstract class, abstract method

Advanced Python Topics: File Operations in Python       Opt
    - examples of json and csv files parsing

Advanced Python Topics: Exceptions & Command Line…      Done
Advanced Python Topics: Python Modules & VirtuaL ENVS   The same as above "Classes and modules"


Data Structures & Algorithms in Python: Fundamental…    Done
    - measurment performance
    - Big O notation
    - O(1)  complexity does not change with the input size, same constant execution time
    - O(N)  complexity (time by algorithm increases) linearly when N increases
    - O(Nx2) complexity increases quadratically when N increases

    - Linked list complexity:
        O(N) insert to end
        O(1) insert to begining
        O(N) find in linked list
        O(1) deleting of first element
        O(N) deleting of random element
        O(N) reversal

    - Stack: LIFO principle
        O(1) PUSH, POP, SIZE, ISEMPTY, ISFULL, SIZE  (PEEK)

    - Queue: FIFO add to end, remove from top ?
        O(1) ENQUEUE(add), DEQUEUE(rem), ISEMPTY, ISFULL
        O(N) SPACE complexity

Data Structures & Algorithms in Python: Implementing data structures    Done

Data Structures & Algorithms in Python: Sorting Algorithms  Done
    - Selection sort
        O(N2)  find smallest, get into first pos, re-iterate

    - Bubble sort
        O(N) --- O(N2) biggest element swapped to the right place of array

    - Insertion sort
        O(N2) compare with prev element, move to left if less (dynamical sorted sublist)

    - Shell sort
        O(N)<-->O(N2) Divide to sublists, use insertion sort for each sublist, then insertion sort
        on whole list created from sublists

    - Merge sort
        O(nlogn) List broken into smaller and smaller resursively, then merge back smallest
        sublists. Recursion algorithm.

    - Quick sort  (binary division sort)
        O(nlogn) Pivot value, all elements less them pivot got to left most place, larger
        pivot got to right


Data Structures & Algorithms in Python: Trees & Graphs   Done
    -  Binary search:
        O(log n)  take index in middle of sorted, all left are less, all right are larger.
        BS working on sorted array. 


    - Binary tree: non linear structure
        each node: 0, 1 or 2 children
        root, edge (2 adj: parent and child),
        leaf (no children),
        sibling node (same parents)
        root: ancestor

    - Binary ordered tree:  left branch , all less root, right branch all larger then root

    - Balanced tree: when number of elements in left and right about the same

    - Min value: left most value in tree.
    - Maximum depth: max distance from the root
    - Sum path: sum of all node values in path
    - Breadth first / Depth first traversal
    - Graph


Socket Programming in Python: Introduction      Done
Socket Programming in Python: Advanced Topics   Done
    - transfer different python objects
    - transfer files: text, image
    - build chats
    - subscribe to RSS
    - sockets in blocking / non blocking mode
    - UDP sockets


Python Concurrent Programming: Introduction to CR
 - Python Global Interpreter Lock (GIL)
 - Python interpretor is working in one thread (GIL) --> multithread tasks are:
    - threats on single CPU Core
    - concurent but not parallel !!!
    - processes are on different cpu cores !!! (Multiprocessing)
    - threads are good for i/o and network bound tasks

-  Data structures for Concurrent Programming:
    - Threads:
        - Queue (FIFO)
        - LifoQueue
        - PriorityQueue
    - Processes:
        - Queue
        - Pipe

    - Process(Thread) Pool =  Set of workers <= N of CPU
      Tasks stay in queue and wait, when worker in pool released


Python Concurrent Programming: Multithreading in Python     Done
Python Concurrent Programming: Multiprocessing in Python    Done
    - queues, stacks --> thread safe
    - Global variables and data can be shared between threads but not pocesses.
    - Global variables can be sennt to process as arg
    - Shared memory can be used between processes
    - Pipes used to sync / send info between processes


Python Concurrent Programming: Asynchronous Executions      Done
AP: check how to use asyncio instead of futures


Data Structures & Algorithms in Python: Implementing sorting    Done
Data Structures & Algorithms in Python: Implementing
Trees & Graphs                                              IP


Django:
--------
Building Web Apps Using Django: Building a Basic Website    Done
- create in virtualenv

Building Web Apps Using Django: Templates & User Administration IP

Building Web Apps Using Django: Implementing Login
Building Web Apps Using Django: Generic Views


K3s use with Django, simple test application
- transfer to kuberentes setup
- create REST project / transfer to kubernetes setup


Python 3: Python - Introduction to NumPy for

