*** First keycloak samples  ***

1.  Getting started documentaiton

https://hub.docker.com/r/jboss/keycloak/
https://www.keycloak.org/documentation.html

docker run -e KEYCLOAK_USER=aelz -e KEYCLOAK_PASSWORD=aelz -p  8080:8080 jboss/keycloak

2. Connect when user and realm created:

http://localhost:8080/auth/realms/<REALMNAME>/account/applications
http://localhost:8080/auth/realms/testRealm/account/applications



NOTES:
-----

- $KEYCLOAK_USER/PASSWORD are visible by echo when connect to  docker

- Created jboss user on docker by default. Could it be escallated to su?

- By default Wildfly appplication is not secured. To secure Java servlet,
 special  adapter should be added ? See chapter 4, Getting started quide.
 Same related to other adapter, see Ch1 , securing apps
 !!! Seems after installation, config  work should be done to secure
     several clients with adapters


- In first step we use standalone config. Do we need plan other .f.i several clustering modes ?
  See Chapter 3 of server installation.

- To setup SQLDB see chapter 6 (postgre),  of server installation

- To setup clients, see Ch 5,6,7 Securing apps

- To see auth policy .f.i RBAC, see Ch 1  of "authorization services"

- Logging manipulation , seems in standalone.xml set extra logger


***** Creating  user with REST-API example *********

et -e
set -u

curl="curl -v"

KEYCLOAK_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' compose_keycloak_1)
KEYCLOAK_ADDR=http://${KEYCLOAK_IP}:8080

REALM=master

# show keycloak authz config
${curl} "${KEYCLOAK_ADDR}/auth/realms/${REALM}/.well-known/openid-configuration" | jq .
${curl} "${KEYCLOAK_ADDR}/auth/realms/${REALM}/.well-known/uma2-configuration" | jq .
 
# admin user of keycloak
USERNAME=admin
PASSWORD=password1
CLIENT_ID=admin-cli
 
# authenticate to admin-cli
# get resource owner access token
resp=$(${curl} -X POST "${KEYCLOAK_ADDR}/auth/realms/${REALM}/protocol/openid-connect/token" \
 -d 'grant_type=password' \
 -d "client_id=${CLIENT_ID}" \
 -d "username=${USERNAME}" \
 -d "password=${PASSWORD}")
echo "${resp}" | jq -r .
ADMIN_TOKEN=$(echo "${resp}" | jq -r .access_token)
ADMIN_REFRESH_TOKEN=$(echo "${resp}" | jq -r .refresh_token)
 
# get admin user info
${curl} "${KEYCLOAK_ADDR}/auth/realms/${REALM}/protocol/openid-connect/userinfo" \
 -H "Authorization: Bearer ${ADMIN_TOKEN}" \
    | jq .
 
# create user1
${curl} -X POST "${KEYCLOAK_ADDR}/auth/admin/realms/${REALM}/users" \
-H "Authorization: Bearer ${ADMIN_TOKEN}" \
-H 'Content-Type:application/json' \
-d '{"username": "user1", "enabled": true, "credentials": [{"type": "password", "value": "password1", "temporary": false}]}' \
    | jq .
 
# create user2
${curl} -X POST "${KEYCLOAK_ADDR}/auth/admin/realms/${REALM}/users" \
-H "Authorization: Bearer ${ADMIN_TOKEN}" \
-H 'Content-Type:application/json' \
-d '{"username": "user2", "enabled": true, "credentials": [{"type": "password", "value": "password1", "temporary": false}]}' \
    | jq .
 
# list users
${curl} "${KEYCLOAK_ADDR}/auth/admin/realms/${REALM}/users" \
-H "Authorization: Bearer ${ADMIN_TOKEN}" | jq .
 
# first create client "myapp" via UI
CLIENT_ID=myapp
CLIENT_SECRET=4df3f06c-711f-4269-b6b3-39584a2067de
USERNAME=user2
PASSWORD=password1
 
# get token for client access
# get resource owner access token
# access token encodes roles
resp=$(${curl} -X POST "${KEYCLOAK_ADDR}/auth/realms/${REALM}/protocol/openid-connect/token" \
 -d 'grant_type=password' \
 -d "client_id=${CLIENT_ID}" \
 -d "client_secret=${CLIENT_SECRET}" \
 -d "username=${USERNAME}" \
 -d "password=${PASSWORD}")
echo "${resp}" | jq -r .
ACCESS_TOKEN=$(echo "${resp}" | jq -r .access_token)
 
${curl} "${KEYCLOAK_ADDR}/auth/realms/${REALM}/protocol/openid-connect/userinfo" \
 -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    | jq .

