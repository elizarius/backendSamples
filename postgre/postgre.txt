
**** Postgresql integration with docker and create first DB ****

0.  Postgresql documentation:

    https://www.postgresql.org/docs/9.4/static/app-postgres.html
    https://www.postgresql.org/

1.  Wildfly docker integrated with Postgresql server:

    https://hub.docker.com/r/rackerlabs/wildfly-postgres/~/dockerfile/
    https://github.com/nkrendel/wildfly-docker

2.  Postgresql docker
    https://github.com/sameersbn/docker-postgresql

3.  Postgresql deploying and running on docker, examples
    https://docs.docker.com/engine/examples/postgresql_service/
    https://blog.danivovich.com/2015/06/29/running-postgres-in-docker/
    https://clusterhq.com/2016/01/08/tutorial-flocker-volume-driver-postgres/


https://hub.docker.com/_/postgres/

docker pull postgres

docker run --name aelz-postgre -e POSTGRES_PASSWORD=aelzpassword -d postgres

**  Start with port mapping ***
docker run --name some-postgres -e POSTGRES_PASSWORD=aelzpassword -d -p 5432:5432 postgres

docker exec -it some-postgres bash

** Connect with psql client **

patronictl list

psql -h localhost -p 5432 -U postgres -W


OR

psql  -U postgres

OR

when start docker:
-----------------
docker run --name postgresql -itd --restart always --env 'DB_USER=fr_user' --env 'DB_PASS=fraud'  --env 'DB_NAME=fraud_db' sameersbn/postgresql:9.6-2

docker exec -it postgresql sudo -u postgres psql fraud_db

create schema subsc_act;
CREATE TABLE subsc_act.subcriber_info (
    imsi BIGINT NOT NULL,
    msisdn TEXT,
    PRIMARY KEY (imsi));


connect to DB from commandline
------------------------------
psql -U postgres

su - postgres -u
source /opt/rh/rh-postgresql96/enable
psql -d notifierdb

**show all db databases and tables **
\list                   # list of all DBs
\c user_db              # connect to specific db
\d db1        # dump relation

select * from db1;

INSERT INTO streamer_streamer VALUES ( nextval('streamer_streamer_id_seq'::regclass) ,'MAJOR', TRUE, '2017-03-03',
'2017-02-02', 'aelz_origin', 222, 'SPEC_Problem', 'ADDIT TEXT OF SPEC PROBLEM');

*** count number records in table:
SELECT COUNT(*) FROM TABLE_NAME;
ALTER USER postgres PASSWORD 'custom-pwd';

# access to schema.table
select * from tenant34."asset_inventory_interface";


Troubleshooting
---------------
- flows/adp_pg.txt
- transcation log corruption (could not locate a valid checkpoint record)
 https://stackoverflow.com/questions/8799474/postgresql-error-panic-could-not-locate-a-valid-checkpoint-record


PG_STAT  commands
-----------------

1. Number of transactions  overall / per db

postgres=# SELECT sum(xact_commit+xact_rollback) FROM pg_stat_database;

   sum
---------
 1077119
(1 row)

postgres=# SELECT xact_commit+xact_rollback FROM pg_stat_database WHERE datname = 'xxx';

----------
   525471
(1 row)



*********************** pg_stat total execution time ******

configure pg_stat in preloaded library:
https://severalnines.com/blog/how-identify-postgresql-performance-issues-slow-queries/


pgbench=# CREATE EXTENSION pg_stat_statements;

CREATE EXTENSION


select pg_stat_statements_reset();


 SELECT substring(query, 1, 50) AS short_query,
              round(total_exec_time::numeric, 2) AS total_exec_time,
              calls,
              round(mean_exec_time::numeric, 2) AS mean,
              round((100 * total_exec_time /
              sum(total_exec_time::numeric) OVER ())::numeric, 2) AS percentage_overall
FROM    pg_stat_statements
ORDER BY total_exec_time DESC
LIMIT 20;


###  detailed view of top requests by total exec time
select userid::regrole, dbid, query
    from pg_stat_statements
    order by total_exec_time desc
    limit 10;

    
select userid::regrole AS UID , dbid AS DBID , substring(query, 1, 200)  AS short_query
    from pg_stat_statements
    order by total_exec_time desc
    limit 10;
    

###  detailed view of top requests by mean exec time 
select userid::regrole, dbid, query
    from pg_stat_statements
    order by mean_exec_time desc
    limit 10;
    
###  op 10 response-time outliers 
select userid::regrole, dbid, query
    from pg_stat_statements
    order by stddev_exec_time desc
    limit 10;




### show current configuration parametets (shared buffers)               
 SELECT name, setting, pending_restart 
          FROM pg_settings  WHERE name  like 'shared%' 
          ORDER BY 1;


## Cashing investigation commands

 CREATE EXTENSION pg_buffercache;

### Show cache size (shared_buffers)

SELECT setting, unit FROM pg_settings WHERE name = 'shared_buffers';




### The distribution of buffers by their usage:

SELECT usagecount, count(*)
FROM pg_buffercache
GROUP BY usagecount
ORDER BY usagecount;


### How intensively tables used in cache;

SELECT c.relname,
  count(*) blocks,
  round( 100.0 * 8192 * count(*) / pg_table_size(c.oid) ) "% of rel",
  round( 100.0 * 8192 * count(*) FILTER (WHERE b.usagecount > 3) / pg_table_size(c.oid) ) "% hot"
FROM pg_buffercache b
  JOIN pg_class c ON pg_relation_filenode(c.oid) = b.relfilenode
WHERE  b.reldatabase IN (
         0, (SELECT oid FROM pg_database WHERE datname = current_database())
       )
AND    b.usagecount is not null
GROUP BY c.relname, c.oid
ORDER BY 2 DESC
LIMIT 10;



# Hit ratio: must be > 99, if less , N of buffers to be increased
SELECT
       sum(heap_blks_read) as heap_read, 
       sum(heap_blks_hit) as heap_hit, 
       (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio

FROM
     pg_statio_user_tables;


# Hit ratio  by table;

https://dba.stackexchange.com/questions/103421/the-cache-hit-rate-using-pg-statio-user-tables

-- perform a "select pg_stat_reset();" when you want to reset counter statistics
with 
all_tables as
(
SELECT  *
FROM    (
    SELECT  'all'::text as table_name, 
        sum( (coalesce(heap_blks_read,0) + coalesce(idx_blks_read,0) + coalesce(toast_blks_read,0) + coalesce(tidx_blks_read,0)) ) as from_disk, 
        sum( (coalesce(heap_blks_hit,0)  + coalesce(idx_blks_hit,0)  + coalesce(toast_blks_hit,0)  + coalesce(tidx_blks_hit,0))  ) as from_cache    
    FROM    pg_statio_all_tables  --> change to pg_statio_USER_tables if you want to check only user tables (excluding postgres's own tables)
    ) a
WHERE   (from_disk + from_cache) > 0 -- discard tables without hits
),
tables as 
(
SELECT  *
FROM    (
    SELECT  relname as table_name, 
        ( (coalesce(heap_blks_read,0) + coalesce(idx_blks_read,0) + coalesce(toast_blks_read,0) + coalesce(tidx_blks_read,0)) ) as from_disk, 
        ( (coalesce(heap_blks_hit,0)  + coalesce(idx_blks_hit,0)  + coalesce(toast_blks_hit,0)  + coalesce(tidx_blks_hit,0))  ) as from_cache    
    FROM    pg_statio_all_tables --> change to pg_statio_USER_tables if you want to check only user tables (excluding postgres's own tables)
    ) a
WHERE   (from_disk + from_cache) > 0 -- discard tables without hits
)
SELECT  table_name as "table name",
    from_disk as "disk hits",
    round((from_disk::numeric / (from_disk + from_cache)::numeric)*100.0,2) as "% disk hits",
    round((from_cache::numeric / (from_disk + from_cache)::numeric)*100.0,2) as "% cache hits",
    (from_disk + from_cache) as "total hits"
FROM    (SELECT * FROM all_tables UNION ALL SELECT * FROM tables) a
ORDER   BY (case when table_name = 'all' then 0 else 1 end), from_disk desc;


#  Vertical print in psql: \x\g\x instead of;

 select * from pg_stat_replication\x\g\x
 
 
 



